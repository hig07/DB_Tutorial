select first_name, upper(first_name), lower(first_name)
from employees;  --대소문자로 호출

select substr(first_name, 1, 2) 
from employees;  --두 글자만 추출
select substrb(first_name, 1, 2) 
from employees;  --2 바이트만 추출

select phone_number,
substr(phone_number, 1, 3), --처음에서 3번째 자리까지 추출
substr(phone_number, 1, instr(phone_number, '.')-1)
from employees;  -- . 전까지 추출
-----------------------------------------------------------------
--시험 가능
select sysdate from dual; --테이블 대상이 없을 때 dual이 대신할 수 있다

select count(*), count(department_id) 
from employees; --null은 개수에 포함하지 않는다

select sum(salary), avg(salary), max(salary), min(salary)
from employees;

select department_id, sum(salary), avg(salary)
from employees
group by department_id --부서별 집계
order by department_id; --group by 시험 중요

select department_id, sum(salary), avg(salary)
from employees
--where avg(salary)>15000 집계함수는 having절로
where department_id>50
group by department_id
HAVING avg(salary)>7000;

--부서별 합계
select department_id, sum(salary)
from employees
GROUP by department_id
union --자동 정렬
select null, sum(salary)
from employees; --rollup을 통해 짧아질 수 있다
-----------------------------------------------------------------
--자동으로 소계, 집계, 총계해주는 rollup
select department_id, sum(salary)
from employees
GROUP BY ROLLUP (department_id);

--부서별 합계(job_id가 null로 나온다)도 나오고 총계(둘다 null)도 나온다
select department_id, job_id, sum(salary)
from employees
GROUP BY ROLLUP(department_id, job_id);

select department_id, job_id, sum(salary)
from employees
GROUP BY department_id, ROLLUP(job_id); --총계는 안나온다
-----------------------------------------------------------------
--자동으로 소계, 집계, 총계해주는 cube
select department_id, sum(salary)
from employees
GROUP BY CUBE (department_id);

select department_id, job_id, sum(salary)
from employees
GROUP BY CUBE (department_id, job_id);

select department_id, sum(salary), GROUPING(department_id)
from employees
GROUP BY department_id
order by 1;

select department_id, sum(salary), GROUPING(department_id)
from employees
GROUP BY ROLLUP(department_id);

select department_id, sum(salary), 
GROUPING(department_id), GROUPING(job_id) --GROUPING에 1은 집계됨을 의미
from employees
GROUP BY ROLLUP(department_id, job_id);

select department_id, salary, 
RANK() over(ORDER BY salary desc)
from employees;
-----------------------------------------------------------------
--핵심 JOIN
--oracle 문법
select employee_id, department_name
from employees, departments;
--ANSI 문법
select employee_id, department_name
from employees cross join departments;
--카티션 곱의 결과가 나온다
-----------------------------------------------------------------
--oracle 문법
select employee_id, department_name
from employees, departments
where employees.department_id=departments.department_id;

--oracle 문법
--별칭 사용시 테이블 명으로 컬럼에 접근하면 에러 발생
--등가조인(EQUI join)
select employee_id, department_name
from employees e, departments d 
where e.department_id=d.department_id
order by 1;

--ANSI 문법
select employee_id, department_name
from employees e join departments d 
on (e.department_id=d.department_id)
order by 1;
-----------------------------------------------------------------
--employee_id, email, manager_id, 매니저 email 출력
--순환 참조 = self join
--애매하지않게 순환 참조는 알리아스를 넣어줘야한다

--oracle 문법
select e1.employee_id, e1.email, e1.manager_id, e2.email
from employees e1, employees e2
where e1.manager_id=e2.employee_id
order by 1;
--ANSI 문법
select e1.employee_id, e1.email, e1.manager_id, e2.email
from employees e1 join employees e2
on (e1.manager_id=e2.employee_id)
order by 1;
-----------------------------------------------------------------
--아리아스 명시하는게 더 안정적
--oracle 문법
select employee_id, email, e.department_id, d.department_name
from EMPLOYEES e, departments d
where e.department_id=d.department_id; --등가조인
--ANSI 문법
SELECT employee_id, email, e.department_id, d.department_name
from EMPLOYEES e join departments d
on e.department_id=d.department_id;
-----------------------------------------------------------------
--oracle left outer join
--null이 허용되어 추가된다
select employee_id, email, e.department_id, d.department_name
from EMPLOYEES e, departments d
where e.department_id=d.department_id(+);
--ANSI outer join
select employee_id, email, e.department_id, d.department_name
from EMPLOYEES e left outer join departments d  --outer 생략 가능
on e.department_id=d.department_id;
--출력 대상이 등가 조건에 부합하더라도 왼쪽 테이블 정보(e)는 모두 출력
--오른쪽 테이블 정보는 null 출력
-----------------------------------------------------------------
--oracle right outer join
select employee_id, email, e.department_id, d.department_name
from EMPLOYEES e, departments d
where e.department_id(+)=d.department_id;
--ANSI outer join
select employee_id, email, e.department_id, d.department_name
from EMPLOYEES e right outer join departments d --outer 생략 가능
on e.department_id=d.department_id;
--오른쪽 테이블 기준이기에 오른쪽 테이블 정보는 모두 출력
--동등 조건에 해당하지 않은 왼쪽 테이블 정보는 null 출력
--outer 생략에 left / right 표시가 있으면 outer
--없이 join 만 있다면 inner
--full (outer) join = left+right = union
-----------------------------------------------------------------
--ANSI fulll outer join
--시험 가능
select employee_id, email, e.department_id, d.department_name
from EMPLOYEES e full outer join departments d
on e.department_id=d.department_id;

select employee_id, email, e.department_id, d.department_name
from EMPLOYEES e, departments d
where e.department_id=d.department_id(+)
union --all은 중복이 나오니까 쓰면 안됨
select employee_id, email, e.department_id, d.department_name
from EMPLOYEES e, departments d
where e.department_id(+)=d.department_id;
-----------------------------------------------------------------
--equi join(등가 조인)이 가장 많이 쓰고 중요하다
--참고) 자연조인은 등가조인의 일종. 알리아스 안써도된다
--양쪽 테이블의 일치하는 컬럼명으로 등가조인
-----------------------------------------------------------------
--departments / employees 대상
--1. 80번 부서의 사원번호,이메일,부서명을 출력하세요.
select e.employee_id, e.email, d.department_name
from employees e join departments d
on d.department_id=80
order by e.employee_id;

--2. 부서가 존재하지 않는 사원번호,이메일출력하세요.
select employee_id, email
from employees
where department_id is null;

--3. 전체 사원의 사원번호,이메일,부서명을 출력하세요.
select e.employee_id, e.email, d.department_name
from employees e left join departments d
on e.department_id=d.department_id
order by e.employee_id;

--4. 20,40,60번 부서 사원의 사원번호,이메일,부서명을 출력하세요.
select e.employee_id, e.email, d.department_name
from employees e inner join departments d
on e.department_id=d.department_id
and e.department_id in(20, 40, 60)
order by e.employee_id;

--5. 전체사원의 사원번호,매니져명,부서명을 출력하세요.
select e.employee_id, e.manager_id, d.department_name
from employees e left join departments d
on e.department_id=d.department_id
order by e.employee_id;
